interface Driver {
	number press(number boxState);
}
class DefaultDriver() < Driver {
	number press(number boxState){return random boxState;}
}
class AutoGear() << Prototype {
	DefaultDriver driver = new DefaultDriver();
	state finalize() { return "End of work"; }
	state sleep() { return neutral(); }
	state neutral(){
		if (driver.press(3) == 1){   return finalize();
		} else if (cmd == 2){ return reverse();	
		} else { return gear1(); }
	}
	state reverse(){ return neutral(); }
	state gear1(){
		if (driver.press(2) == 1){	return neutral();
		} else {	return gear2();	}
	}
	state gear2(){
		if (driver.press(2) == 1){ return gear1();
		} else { return gear3();}
	}
	state gear3(){
		if (driver.press(2) == 1){	return gear2();
		} else { return gear4(); }
	}
	state gear4(){
		if (driver.press(2) == 1){	return gear3();
		} else { return gear5(); }
	}
	state gear5(){ 	return gear4();	}
	state main(){	return sleep();	}
}
prototype AutoGear() {
} 