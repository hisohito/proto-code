interface Driver {
	number press(number boxState);
}

class DefaultDriver < Driver {
	number press(number boxState){
		return random boxState;
	}
}

class AutoGear << Prototype {
	Driver driver = new DefaultDriver();

	state initialize() {}

	state finalize() {
		return "End of work";
	}

	state sleep() {
		return neutral();
	}

	state neutral(){
		cmd = driver.press(3);
		if (cmd == 1){// engine turn off selected
	        return finalize();
		} else if (cmd == 2){ // reverse selected				
			return reverse();			
		} else { // forward selected
			return gear1();
		}
	}

	state reverse(){
		return neutral();
	}

	state gear1(){
		cmd = driver.press(2);
		if (cmd == 1){
			return neutral();
		} else {
			return gear2();
		}
	}
	state gear2(){
		cmd = driver.press(2);
		if (cmd == 1){
			return gear1();
		} else {
			return gear3();
		}
	}
	state gear3(){
	       cmd = driver.press(2);
		if (cmd == 1){
			return gear2();
		} else {
			return gear4();
		}
	}
	state gear4(){
	        cmd = driver.press(2);
		if (cmd == 1){
			return gear3();
		} else {
			return gear5();
		}
	}
	state gear5(){
        return gear4();
	}

	state main(){
		return sleep();
	}
}

prototype AutoGear() {
	finally AutoGear::finalize;
	globally finally AutoGear::neutral;
	AutoGear::neutral until AutoGear::finalize;	
} 