interface Driver {
	number press(number boxState);
}

class DefaultDriver() < Driver {
	
	state waste(){
		return 0;
	}
	
	state waste2(){
		return 0;
	}
	
	number another_not_state(){
		waste2();
	}
	
	number not_state(){
		return another_not_state();
	}
	
	number press(number boxState){
		if(cmd == 1)
			return waste();
		else
			return not_state();
	}
}

class AutoGear() << Prototype {

	DefaultDriver driver = new DefaultDriver();
	number cmd;

	state finalize() {
		return "End of work";
	}

	state sleep() {
		return neutral();
	}

	state neutral(){
		number cmd = driver.press(3);
		if (cmd == 1){// engine turn off selected
	        return finalize();
		} else if (cmd == 2){ // reverse selected				
			return reverse();			
		} else { // forward selected
			return gear1();
		}
	}

	state reverse(){
		return neutral();
	}

	state gear1(){
		cmd = driver.press(2);
		if (cmd == 1){
			return neutral();
		} else {
			return gear2();
		}
	}
	state gear2(){
		cmd = driver.press(2);
		if (cmd == 1){
			return gear1();
		} else {
			return gear3();
		}
	}
	state gear3(){
	    cmd = driver.press(2);
		if (cmd == 1){
			return gear2();
		} else {
			return gear4();
		}
	}
	state gear4(){
	    cmd = driver.press(2);
		if (cmd == 1){
			return gear3();
		} else {
			return gear5();
		}
	}
	state gear5(){
        	return gear4();
	}

	state main(){
		return sleep();
	}
}

prototype AutoGear() {
	finally{AutoGear::finalize} ;
	globally finally{(AutoGear::neutral)};
	{AutoGear::neutral}until{AutoGear::finalize};	
	finally{(AutoGear::gear1 and AutoGear::gear2)};
} 