== Tokens ==

data types:		"number", "state", , "prototype", "string", "bool", "object"
functions:		"random", "initialize", "finalize", "main"
LTL:			"finally", "globally", "until", "release"

"<", "<<", ",", ";", "+", "-", "*", "/", "=", "==", "!=", "(", ")", "]", "[", "::"

buildin words:	"interface", "class", "return", "new"

== Grammar ==
<PROGRAM> ::= { <STATEMENT> }
<STATEMENT> ::= <INTERFACE_DESCR> | <CLASS_DESCR> | <LTL_RULE>
<LTL_RULE> ::= "prototype" ID "(" ")" "{" { <LTL_OP> } "}"
<LTL_OP> ::= ("finally" | "globally") ID ";" | ID ( "until" | "release" ) ID ";"
<INTERFACE_DESCR> ::= "interface" ID "{" <METHODS> "}"
<METHODS> ::= <TYPE> ID "(" [ {<TYPE> ID [ "," <TYPE> ID] } ] ")" ";"
<TYPE> ::= "number" | "bool" | "string" | "object"
<CLASS_DESCR> ::= "class" ID [ ( "<" ID [ { "," ID } ] ) | ( "<<" ID ) ] "{" { <VAR> } "}"
<VAR> ::= <TYPE> ID  "=" <EXPRESSION> ";" | "state" ID "(" [ {<TYPE> ID [ "," <TYPE> ID] } ] ")" "{" {<STATE_BODY>} "}"
<STATE_BODY> ::= <ASSIGNMENT> ";" | <BUILDIN_OPERATOR> | <CALL> | <IF> | <FOR> | <WHILE> | <DO>
<BUILDIN_OPERATOR> ::= <PRINT> | <DIE> | <RETURN>
<DIE> ::= "die" <EXPRESSION> ";"
<PRINT> ::= "print" <EXPRESSION> ";"
<RETURN> ::= "return" <EXPRESSION> ";"
<ASSIGNMENT> ::= <ID> "=" <EXPRESSION>
<CALL> ::= <ID> "(" [ <EXPRESSION> { ", " <EXPRESSION> } ] ")" ";"

<EXPRESSION> ::= [ <EXPRESSION> ( ">" | "<" | "<=" | ">=" | "==" | "!=" ) <SUMMAND> ] ("+" <SUMMAND> | "-" <SUMMAND>)
<SUMMAND> ::= [ <SUMMAND> "+" | <SUMMAND> "-" ] <MULTIPLIER>
<MULTIPLIER> ::= [ <MULTIPLIER> "*" | <MULTIPLIER> "/" ] <SIMPLE_EXPRESSION>
<SIMPLE_EXPRESSION> ::= <ID> | <NUMBER> | <STRING> | <CALL> | "(" <EXPRESSION> ")"

<BODY> ::= "{" { <STATE_BODY> } "}" | <STATE_BODY>
<IF> ::= "if" "(" <EXPRESSION> ")" <BODY> [ "else" <BODY> ]
<FOR> ::= "for" "(" <ASSIGNMENT> ";" <EXPRESSION> ";"  <ASSIGNMENT> ")" <BODY>
<WHILE> ::= "while" "(" <EXPRESSION> ")" <BODY>
<DO> ::= "do" "{" { <STATE_BODY> } "}" "while" "(" <EXPRESSION> ")" ";"

//TODO change EXPRESSION
