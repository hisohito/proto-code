== Tokens ==

data types:		"number", "state", , "prototype", "string", "bool", "object"
functions:		"random", "initialize", "finalize", "main"
LTL:			"finally", "globally", "until", "release"

"<", "<<", ",", ";", "+", "-", "*", "/", "=", "==", "!=", "(", ")", "]", "[", "::"

buildin words:	"interface", "class", "return", "new"

TODO: rename METHODS, VAR

<A> = { "A" }

AA
AAAAAA
A

<TYPE> ID,

== Grammar ==
<PROGRAM> ::= { <STATEMENT> }
<STATEMENT> ::= <INTERFACE_DECL> | <CLASS_DECL> | <PROTO_DECL>
<PROTO_DECL> ::= "prototype" ID "(" <PARAMETERS> ")" "{" { <SPEC_DECL> } "}"
<SPEC_DECL> ::= ("finally" | "globally") ID ";" | ID ( "until" | "release" ) ID ";" ######## WRONG!
<INTERFACE_DECL> ::= "interface" ID "{" { <METHOD_DECL> } "}"
<METHOD_DECL> ::= <TYPE> ID "(" <ARGUMENTS> ")" ";"
<ARGUMENTS> :: = [ <TYPE> ID { "," <TYPE> ID } ]
<PARAMETERS> ::= [ <EXPRESSION> { "," <EXPRESSION> } ]  
<TYPE> ::= "void" | "state" | "number" | "bool" | "string" | "object" | <ARRAY_TYPE>
<ARRAY_TYPE> ::= <TYPE> "[" "]" { "[" "]" }
<CLASS_DECL> ::= "class" ID # [ ( "<" ID [ { "," ID } ] ) | ( "<<" ID ) ] "{" { (<METHOD> | <FIELD>) } "}"
<METHOD> ::= <TYPE> ID "(" <ARGUMENTS> ")" "{" { <OPERATOR> } "}"
<FIELD> ::= <TYPE> ID [ "=" <EXPRESSION> ] ";"
<OPERATOR> ::= <ASSIGNMENT> ";" | <BUILDIN_OPERATOR> | <CALL> ";" | <IF> | <FOR> | <WHILE> | <DO> | "{" <OPERATOR> "}"
<BUILDIN_OPERATOR> ::= <PRINT> | <DIE> | <RETURN>
<DIE> ::= "die" <EXPRESSION> ";"
<PRINT> ::= "print" <EXPRESSION> ";"
<RETURN> ::= "return" <EXPRESSION> ";"
<ASSIGNMENT> ::= <ID> { "[" <EXPRESSION> "]" } "=" <EXPRESSION>
<CALL> ::= <ID> "(" <PARAMETERS> ")"

<EXPRESSION> ::= [ <EXPRESSION> ( ">" | "<" | "<=" | ">=" | "==" | "!=" ) <SUMMAND> ] ("+" <SUMMAND> | "-" <SUMMAND>) ####### or, and, not
<SUMMAND> ::= [ <SUMMAND> "+" | <SUMMAND> "-" ] <MULTIPLIER>
<MULTIPLIER> ::= [ <MULTIPLIER> "*" | <MULTIPLIER> "/" ] <SIMPLE_EXPRESSION>
<SIMPLE_EXPRESSION> ::= <ID> { "[" <EXPRESSION> "]" } | <NUMBER> | <STRING> | <CALL> | "[" <PARAMETERS> "]" | "(" <EXPRESSION> ")" | "nan" | "nil" | "new" ID "(" <PARAMETERS> ")" 

<IF> ::= "if" "(" <EXPRESSION> ")" <OPERATOR> [ "else" <OPERATOR> ]
<FOR> ::= "for" "(" <ASSIGNMENT> ";" <EXPRESSION> ";"  <ASSIGNMENT> ")" <OPERATOR>
<WHILE> ::= "while" "(" <EXPRESSION> ")" <OPERATOR>
<DO> ::= "do" "{" <OPERATOR> "}" "while" "(" <EXPRESSION> ")" ";"

//TODO change EXPRESSION
